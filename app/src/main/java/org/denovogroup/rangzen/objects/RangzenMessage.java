// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: /Users/barathraghavan/code/rangzen/rangzen/buck-out/gen/proto-repo/compile_protobufs__srcs/RangzenMessage.proto
package org.denovogroup.rangzen.objects;

import android.content.Context;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import org.denovogroup.rangzen.backend.*;
import org.denovogroup.rangzen.backend.SecurityManager;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.Calendar;

import static com.squareup.wire.Message.Datatype.DOUBLE;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.OPTIONAL;
import static com.squareup.wire.Message.Label.REQUIRED;

/**
 * Representation of a single Rangzen message with text and priority.
 */
public final class RangzenMessage extends Message {

  public static final String DEFAULT_TEXT = "";
  public static final Double DEFAULT_TRUST = 0.01D;
    public static final int DEFAULT_PRIORITY = 0;
    public static final String DEFAULT_PSEUDONYM = "";

    public static final String TEXT_KEY = "text";
    public static final String TRUST_KEY = "trust";
    public static final String PRIORITY_KEY = "priority";
    public static final String PSEUDONYM_KEY = "pseudonym";

  /**
   * The message's text, as a String.
   */
  @ProtoField(tag = 1, type = STRING, label = REQUIRED)
  public final String text;

  /**
   * The message's trust, as a double.
   */
  @ProtoField(tag = 2, type = DOUBLE, label = REQUIRED)
  public final Double trust;

    /**
     * The message's priority, as a double.
     */
    @ProtoField(tag = 3, type = INT32, label = OPTIONAL)
    public final Integer priority;

    /**
     * The message's sender name, as a String.
     */
    @ProtoField(tag = 4, type = STRING, label = OPTIONAL)
    public final String pseudonym;

    /**
     * The message's timestamp, as a long.
     */
    @ProtoField(tag = 5, type = INT64, label = OPTIONAL)
    public final long timestamp;

  public RangzenMessage(String text, Double trust, Integer priority, String pseudonym, long timestamp) {
    this.text = text;
    this.trust = trust;
    this.priority = priority;
      this.pseudonym = pseudonym;
      this.timestamp = timestamp;
  }

    public RangzenMessage(String text, Double trust, Integer priority, String pseudonym) {
        this.text = text;
        this.trust = trust;
        this.priority = priority;
        this.pseudonym = pseudonym;
        this.timestamp = 0;
    }

    public RangzenMessage(String text, Double trust) {
        this.text = text;
        this.trust = trust;
        this.priority = DEFAULT_PRIORITY;
        this.pseudonym = DEFAULT_PSEUDONYM;
        this.timestamp = 0;
    }

  private RangzenMessage(Builder builder) {
    this(builder.text, builder.trust, builder.priority, builder.pseudonym, builder.timestamp);
    setBuilder(builder);
  }

    public static RangzenMessage fromJSON(Context context, JSONObject json){

        SecurityProfile securityProfile = SecurityManager.getCurrentProfile(context);

        Calendar currentTime = Utils.reduceCalendar(Calendar.getInstance());

        return new RangzenMessage(
                json.optString(TEXT_KEY, DEFAULT_TEXT),
                json.optDouble(TRUST_KEY,DEFAULT_TRUST),
                json.optInt(PRIORITY_KEY, DEFAULT_PRIORITY),
                json.optString(PSEUDONYM_KEY, DEFAULT_PSEUDONYM),
                securityProfile.isTimestamp() ?
                        currentTime.getTimeInMillis() : 0
                );
                //TODO opt location
    }

    public static RangzenMessage fromJSON(Context context, String jsonString){
        JSONObject json;
        try {
            json = new JSONObject(jsonString);
        } catch (JSONException e) {
            e.printStackTrace();
            json = new JSONObject();
        }
        return fromJSON(context, json);
    }

    /** convert the message into a json based on current security profile settings */
    public JSONObject toJSON(Context context){
        JSONObject result = new JSONObject();
        try {
            result.put(TEXT_KEY, this.text);
            result.put(TRUST_KEY, this.trust + Utils.makeNoise(0d, 0.003d));
            result.put(PRIORITY_KEY, this.priority);

            SecurityProfile profile = SecurityManager.getCurrentProfile(context);

            //put optional items based on security profile settings
            if(profile.isPseudonyms()) result.put(PSEUDONYM_KEY, this.pseudonym);
            //if(profile.isShareLocation()) result.put(TEXT_KEY, this.location); //TODO location

        } catch (JSONException e) {
            e.printStackTrace();
        }
        return result;
    }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RangzenMessage)) return false;
    RangzenMessage o = (RangzenMessage) other;
    return equals(text, o.text)
        && equals(priority, o.priority);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = text != null ? text.hashCode() : 0;
      result = result * 37 + (priority != null ? priority.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<RangzenMessage> {

    public String text;
    public Double trust;
      public Integer priority;
      public String pseudonym;
      public long timestamp;

    public Builder() {
    }

    public Builder(RangzenMessage message) {
      super(message);
      if (message == null) return;
      this.text = message.text;
        this.trust = message.trust;
      this.priority = message.priority;
      this.pseudonym = message.pseudonym;
        this.timestamp = message.timestamp;
    }

    /**
     * The message's text, as a String.
     */
    public Builder text(String text) {
      this.text = text;
      return this;
    }

      /**
       * The message's trust, as a double.
       */
      public Builder trust(Double trust) {
          this.trust = trust;
          return this;
      }

    /**
     * The message's priority, as an integer.
     */
    public Builder priority(Integer priority) {
      this.priority = priority;
      return this;
    }

      /**
       * The message's sender name, as a string.
       */
      public Builder pseudonym(String pseudonym) {
          this.pseudonym = pseudonym;
          return this;
      }

      /**
       * The message's timestamp, as a string.
       */
      public Builder timestamp(long timestamp) {
          this.timestamp = timestamp;
          return this;
      }

    @Override
    public RangzenMessage build() {
      checkRequiredFields();
      return new RangzenMessage(this);
    }
  }
}
